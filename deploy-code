#!/usr/bin/php
<?php
// Checking for chrpath
system("mkdir -p .deploy");
system('which chrpath > /dev/null', $ret);
if ($ret != 0) {
    die("Error: you should have chrpath installed (apt-get install chrpath)\n");
}

// Remote host
$remote = isset($argv[1]) ? $argv[1] : '10.0.0.1';

// Killing server on host
echo "Killing KidSize on " . $remote;
`ssh rhoban@$remote ./env/stop.sh`;

// Parameters
$binary = 'devel_release/lib/kid_size/KidSize';
$targetHost = 'rhoban@'.$remote;
$targetDir = '/home/rhoban/catkin_rel/';

$libBlackList=array("libpthread.","libstdc","libm.","libgcc","libc.","libdl-","libdl.");


function smartCopyFile($filename){
    global $libBlackList;
    $name=basename($filename);
    foreach($libBlackList as $l)
        if (strpos($name,$l)===0)
            return;
    //echo "smartCopyFile of ".$filename."\n";
    if (file_exists(".deploy/".$name))
        return;
    if (is_link($filename)){ 
        $src=readlink($filename);
        //echo $filename." is a link pointing to ".$src."\n";
        if (substr($src,0,1)!='/'){
            $src=dirname($filename)."/".$src;
            //echo "rel to abs: ".$src."\n";
        }
        smartCopyFile($src);
        $srcname=basename($src);
        symlink($srcname,".deploy/".$name);
    } else {
        copy($filename,".deploy/".$name);
    }    
}

function smartCopy($filePattern){
    foreach(glob($filePattern) as $filename){
        smartCopyFile($filename);
    }
}

// Libraries
echo "* Preparing system libraries...\n";

$out = `ldd $binary|grep -iv "Not found|grep -iv "`;

$lines = explode("\n", trim($out));

foreach ($lines as $line) {
    $parts = explode(' ', trim($line));
    if (count($parts) > 3) {
        $lib = $parts[2];
        if (trim($lib)) {
            if (strstr($lib, 'deps') || strstr($lib, 'home')) {
                `cp $lib .deploy/`;
            }
            else {
                smartCopy($lib);
            }
        }
    }
}


// Deploying
echo "* Sending files...\n";
`cp $binary .deploy/`;
$binaryName = basename($binary);
`chrpath --replace $targetDir .deploy/$binaryName`;
`rsync --delete -av --info=flist2,name,progress .deploy/ $targetHost:$targetDir`;

